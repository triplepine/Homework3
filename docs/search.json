[
  {
    "objectID": "HW3-Reading and Manipulating Data.html",
    "href": "HW3-Reading and Manipulating Data.html",
    "title": "HW3-Reading and Manipulating Data",
    "section": "",
    "text": "readr_csv(“../MyData.csv”)\n\n\n\n\n\nR projects easily creat working directories and make switching between projects and sharing code smoothly.\n\n\n\n\n\nGit is a popular version control system. It is used for:Tracking code changes,Tracking who made changes,Coding collaboration. Github is designed as a Git repository hosting service. It’s an online database that allows you to keep track of and share your Git version control projects outside of your local computer/server.\n\n\n\n\n\nDifferences 1: Printing. Tibbles only show the first 10 rows and all the columns that will fit on screen. Additional columns are shown at the bottom. data.frame show all rows and columns. 2. Subsetting. Tibble always get a similar type of output. Data.frame: Output can vary based on how you ask for it.\n\n\n\n\n\narrange(filter(select(as_tibble(iris),starts_with(“Petal”),Species),Petal.Length &lt;1.55),Species)\n\n\niris_tbl &lt;-as_tibble(iris) iris_tbl |&gt; filter(Petal.Length &lt; 1.55) |&gt; select (starts_with(“Petal”), Species) |&gt; arrange(Species)\n\n\n\n\n\nLong format data: each row consists of one observation and each column one variable. Wide format data: may have more than one observation in a given row. Because almost all of the plotting, summarizing, and modeling we do in statistics expects data to be in long form, so we generally prefer long format data for statistical analysis."
  },
  {
    "objectID": "HW3-Reading and Manipulating Data.html#task-1-conceptual-questions",
    "href": "HW3-Reading and Manipulating Data.html#task-1-conceptual-questions",
    "title": "HW3-Reading and Manipulating Data",
    "section": "",
    "text": "readr_csv(“../MyData.csv”)\n\n\n\n\n\nR projects easily creat working directories and make switching between projects and sharing code smoothly.\n\n\n\n\n\nGit is a popular version control system. It is used for:Tracking code changes,Tracking who made changes,Coding collaboration. Github is designed as a Git repository hosting service. It’s an online database that allows you to keep track of and share your Git version control projects outside of your local computer/server.\n\n\n\n\n\nDifferences 1: Printing. Tibbles only show the first 10 rows and all the columns that will fit on screen. Additional columns are shown at the bottom. data.frame show all rows and columns. 2. Subsetting. Tibble always get a similar type of output. Data.frame: Output can vary based on how you ask for it.\n\n\n\n\n\narrange(filter(select(as_tibble(iris),starts_with(“Petal”),Species),Petal.Length &lt;1.55),Species)\n\n\niris_tbl &lt;-as_tibble(iris) iris_tbl |&gt; filter(Petal.Length &lt; 1.55) |&gt; select (starts_with(“Petal”), Species) |&gt; arrange(Species)\n\n\n\n\n\nLong format data: each row consists of one observation and each column one variable. Wide format data: may have more than one observation in a given row. Because almost all of the plotting, summarizing, and modeling we do in statistics expects data to be in long form, so we generally prefer long format data for statistical analysis."
  },
  {
    "objectID": "HW3-Reading and Manipulating Data.html#task-2-reading-delimited-data",
    "href": "HW3-Reading and Manipulating Data.html#task-2-reading-delimited-data",
    "title": "HW3-Reading and Manipulating Data",
    "section": "Task 2 Reading Delimited Data",
    "text": "Task 2 Reading Delimited Data\n\nlibrary(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tibble)\n\nWarning: package 'tibble' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ purrr     1.0.2\n✔ ggplot2   3.5.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in glass data directly from the URL using functions from the tidyverse.\nglass_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                         delim = \",\",\n                         col_names =c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# print out the tibble\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n# use case_when() to replace Type_of_glass values\nglass_data$Type_of_glass &lt;- factor(glass_data$Type_of_glass)\nglass_data1 &lt;- glass_data |&gt;\n  mutate(Type_of_glass=case_when(Type_of_glass==\"1\" ~ \"building_windows_float_procesed\",\n                                 Type_of_glass==\"2\" ~\n                                   \"building_windows_non_float_processed\",\n                                 Type_of_glass==\"3\" ~ \"vehicle_windows_float_processed\",\n                                 Type_of_glass==\"4\" ~ \"vehicle_windows_non_float_processed (none in this database\",\n                                 Type_of_glass==\"5\" ~ \"containers\",\n                                 Type_of_glass==\"6\" ~ \"tableware\",\n                                 Type_of_glass==\"7\" ~ \"headlamps\",\n                                 TRUE ~ \" \")) |&gt;\n  filter(Fe &lt;0.2 & Type_of_glass %in% c(\"tableware\",\"headlamp\"))\n\n# use elseif()\nglass_data2 &lt;- glass_data |&gt;\n  mutate(Type_of_glass=     ifelse(Type_of_glass==\"1\",\"building_windows_float_procesed\",\nifelse(Type_of_glass ==\"2\" ,\"building_windows_non_float_processed\",       ifelse(Type_of_glass==\"3\",\"vehicle_windows_float_processed\",              ifelse(Type_of_glass==\"4\",\"vehicle_windows_non_float_processed (none in this database\",                                                   ifelse(Type_of_glass==\"5\", \"containers\",                                  ifelse(Type_of_glass==\"6\",\"tableware\",                                    ifelse(Type_of_glass==\"7\",\"headlamps\",\" \")))))))) |&gt;\n  filter(Fe &lt;0.2 & Type_of_glass %in% c(\"tableware\",\"headlamp\"))\n\nYeast Data\n\n# Read in Yeast Data directly from the URL using function from tidyverse.\n# ADT1_YEAST  0.58  0.61  0.47  0.13  0.50  0.00  0.48  0.22  MIT\nyeast_data &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", fwf_widths(c(12,6,6,6,6,6,6,6,6,3),                        c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# print the tibble                       \nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n# start a chain to remove seq_name and nuc columns\nyeast_data |&gt;\n  select(mcg:vac,class) |&gt;\n  mutate(across(where(is.numeric),list(mean1=mean,median=median),.names=\"{.col}_{.fn}\")) |&gt;\n    View()"
  },
  {
    "objectID": "HW3-Reading and Manipulating Data.html#task-2_2-combining-excel-and-delimited-data",
    "href": "HW3-Reading and Manipulating Data.html#task-2_2-combining-excel-and-delimited-data",
    "title": "HW3-Reading and Manipulating Data",
    "section": "Task 2_2: Combining Excel and Delimited Data",
    "text": "Task 2_2: Combining Excel and Delimited Data\n\n# read in white wine data\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.3\n\nlibrary(dplyr)\nwhite_wine_data &lt;-read_excel(\"white-wine.xlsx\")\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n# read the var names from 2nd sheet\nnew_names &lt;- read_excel(\"white-wine.xlsx\",\n                        sheet = excel_sheets(\"white-wine.xlsx\")[2],\n                        col_names = TRUE)\ncolnames(white_wine_data)&lt;-new_names$Variables\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n# add a column to indicate 'white' for every observation.\nwhite_wine_data$type =\"white\"\n#white_wine_data &lt;- white_wine_data |&gt;\n#  mutate(type='white')\n\n# read in red wine data set\nred_wine_data &lt;-read.csv(\"red-wine.csv\",sep=\";\")\n\n# replace the variable names\ncolnames(red_wine_data) &lt;-new_names$Variables\n\n# add a column type as 'red'\nred_wine_data$type =\"red\"\n#red_wine_data |&gt;\n#  mutate(type=\"red\")\n\n# combine two data sets into one.\ncombine_wine_tbl &lt;-dplyr::bind_rows(white_wine_data,red_wine_data)\n\n# filter the data quality&gt;6.5 and alcohol&lt;132\ncombine_wine_tbl |&gt;\n  filter(quality&gt;6.5 & alcohol&lt;132) |&gt;\n  # sort the data from highst quality to lowest\n  arrange(desc(quality)) |&gt;\n  # select only var contain acid, and alcohol, type, quality variable\n  select(contains('acid'),alcohol,type,quality) |&gt;\n  # add the mean and std of the alcohol variable for each setting of the quality variable\n  group_by(quality) |&gt;\n  mutate(mean_alcohol=mean(alcohol,na.rm=TRUE),sd_alcohol=sd(alcohol,na.rm=TRUE))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality mean_alcohol\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: sd_alcohol &lt;dbl&gt;"
  },
  {
    "objectID": "HW3-Reading and Manipulating Data.html#task-3-database-practice",
    "href": "HW3-Reading and Manipulating Data.html#task-3-database-practice",
    "title": "HW3-Reading and Manipulating Data",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\n\n#install.packages(\"RSQLite\")\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.3\n\nlibrary(tidyverse)\nlibrary(RSQLite)\n\nWarning: package 'RSQLite' was built under R version 4.3.3\n\n# conncet to Lahman.db\ncon &lt;- dbConnect(RSQLite::SQLite(),\"lahman.db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n# use tbl() function and dplyr to return all of the data from the Teams table for year 2015.\nteams_data &lt;- tbl(con,\"Teams\") |&gt;\n  filter(yearID==2015) |&gt;\n  collect()\n# use sql() function within tbl() to repeat above filter\nteams_data_s &lt;- tbl(con,sql(\n  \"SELECT t.*\n  FROM Teams as t\n  where t.yearID = 2015\"\n)) |&gt;\n  collect()\n\n\n# 4.return all players in the hall of fame\ntbl(con,\"HallOfFame\")  |&gt;\n  filter(inducted==\"Y\") |&gt;\n  select(playerID,yearID,category) |&gt;\n  collect()\n\n# A tibble: 340 × 3\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ 330 more rows\n\n# 5.combine the table with People table to have nameFisrt and nameLast\npeople_data &lt;-tbl(con,\"People\")|&gt;\n  collect()\n\ncombine_hp &lt;-tbl(con,sql(\n  \"SELECT h.playerID,\n          h.yearID,\n          h.category,\n          p.nameFirst,\n          p.nameLast\n  FROM HallOfFame as h\n  left join People as p on (h.playerID=p.playerID)\n  where inducted ='Y' \"\n)) |&gt;\n  collect()\n\ncombine_hp1 &lt;- left_join(tbl(con,\"HallOfFame\") |&gt;\n                         filter(inducted==\"Y\") |&gt;\n  select(playerID,yearID,category),\n                         tbl(con,\"People\") |&gt;\n    select(playerID, nameFirst, nameLast),\n                         by=join_by(playerID==playerID)) |&gt;\n  collect() \n  \n# 6.return playerID(manager ID),G,W,L columns from the Managers table and then determine sum of wins and sum of losses for each of these hall of fame managers.\nmy_data &lt;-tbl(con,\"Managers\") |&gt;\n  select(playerID,G,W,L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm=TRUE),\n            Total_W =sum(W,na.rm=TRUE),\n            Total_L =sum(L,na.rm=TRUE)) |&gt;\n  collect() |&gt;\n    mutate(win_loss_percent = (Total_W / G_managed *100)) |&gt;\n  arrange(desc(win_loss_percent)) |&gt;\n # print(n=30)\n\n# 7.return people that managed a team and were inducted into the hall of fame\ninner_join(left_join(tbl(con,\"HallOfFame\") |&gt;\n                       filter(inducted==\"Y\") |&gt;\n                       select(playerID,yearID,category),\n                    tbl(con,\"People\") |&gt;\n                       select(playerID, nameFirst, nameLast),\n                         by=join_by(playerID==playerID)) |&gt;\n  collect() ,\n  tbl(con,\"Managers\") |&gt;\n  select(playerID,G,W,L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm=TRUE),\n            Total_W =sum(W,na.rm=TRUE),\n            Total_L =sum(L,na.rm=TRUE)) |&gt;\n  collect() |&gt;\n    mutate(win_loss_percent = (Total_W / G_managed *100)) |&gt;\n  arrange(desc(win_loss_percent)),\n  by= join_by(playerID==playerID) )|&gt;\n    collect()"
  }
]